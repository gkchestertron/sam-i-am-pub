#!/bin/bash

usage() {
  cat<<HERE
  general api management

  Usage: <command> [args...]

  Commands:
    setenv <sandbox|staging|sandboxv1>          sets the env
        
    env                                         logs the env

    call <version> <endpoint> [method] [data] 	makes an api call
HERE
}

completion() {
  prev=$1
  cur=$2
	sub="${COMP_WORDS[2]}"

  if [ "$prev" = "setenv" ]; then
    echo sandbox staging sandboxv1
	elif [ "$prev" = "call" ]; then
		echo v1 v2
	elif [ "$sub" = "call" ] && [ ! -z "${COMP_WORDS[4]}" ]; then
    echo delete get post put
	elif [ "$sub" = "call" ] && [ ! -z "${COMP_WORDS[3]}" ]; then
    echo customers
  fi
}

customers-setenv() {
  SQ_ENV=$1
  touch /tmp/.sqenv
  if [ "$SQ_ENV" = "sandbox" ]; then
    rm /tmp/.sqenv
    echo export SQ_ENV=$SQ_ENV >> /tmp/.sqenv
    echo export SQ_ACCESS_TOKEN=$SQ_SANDBOX_ACCESS_TOKEN >> /tmp/.sqenv
    echo export SQ_APP_ID=$SQ_SANDBOX_APP_ID >> /tmp/.sqenv
    echo export SQ_HOST=connect.squareupsandbox.com >> /tmp/.sqenv
  elif [ "$SQ_ENV" = "staging" ]; then
    rm /tmp/.sqenv
    echo export SQ_ENV=$SQ_ENV >> /tmp/.sqenv
    echo export SQ_ACCESS_TOKEN=$SQ_STAGING_ACCESS_TOKEN >> /tmp/.sqenv
    echo export SQ_APP_ID=$SQ_STAGING_APP_ID >> /tmp/.sqenv
    echo export SQ_HOST=connect.squareupstaging.com >> /tmp/.sqenv
  elif [ "$SQ_ENV" = "sandboxv1" ]; then
    rm /tmp/.sqenv
    echo export SQ_ENV=$SQ_ENV >> /tmp/.sqenv
    echo export SQ_ACCESS_TOKEN=$SQ_STAGING_ACCESS_TOKEN_V1 >> /tmp/.sqenv
    echo export SQ_APP_ID=$SQ_STAGING_APP_ID_V1 >> /tmp/.sqenv
    echo export SQ_HOST=connect.squareup.com >> /tmp/.sqenv
  else
    echo invalid env name
  fi
}

customers-env() {
  echo \$SQ_ENV : $SQ_ENV
  echo \$SQ_HOST : $SQ_HOST
  echo \$SQ_APP_ID : $SQ_APP_ID
  echo \$SQ_ACCESS_TOKEN : $SQ_ACCESS_TOKEN

  echo
  echo warning: to get access env in your own shell, run \"source /tmp/.sqenv\"
}

api-call() {
  version=$1
  endpoint=$2
	method=$3
	data=$4

  if [ ! -z "$data" ]; then
    echo executing: curl -X $method -H \"Accept: application/json\" -H \"Authorization: Bearer $SQ_ACCESS_TOKEN\" -d \"$data\" \"https://$SQ_HOST/$version/$endpoint\"
  elif [ ! -z "$method" ]; then
    echo executing: curl -X $method -H \"Accept: application/json\" -H \"Authorization: Bearer $SQ_ACCESS_TOKEN\" \"https://$SQ_HOST/$version/$endpoint\"
  else
    echo executing: curl -H \"Accept: application/json\" -H \"Authorization: Bearer $SQ_ACCESS_TOKEN\" \"https://$SQ_HOST/$version/$endpoint\"
    curl -H "Accept: application/json" -H "Authorization: Bearer $SQ_ACCESS_TOKEN" "https://$SQ_HOST/$version/$endpoint"
  fi
}

touch /tmp/.sqenv
source /tmp/.sqenv

cmd=$1
args=${@:2}

# print usage if no command is passed
if [ "$cmd" = "setenv" ]; then
  customers-setenv $2
elif [ "$cmd" = "env" ]; then
  customers-env
elif [ "$cmd" = "call" ]; then
  api-call ${args[@]}
else
  usage
fi
